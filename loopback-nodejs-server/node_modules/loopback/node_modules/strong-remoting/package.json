{
  "name": "strong-remoting",
  "description": "StrongLoop Remoting Module",
  "version": "0.0.1",
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "debug": "latest",
    "express": "~3.2.4",
    "eventemitter2": "~0.4.11",
    "qs": "~0.6.5",
    "cors": "~1.0.1"
  },
  "devDependencies": {
    "mocha": "latest",
    "supertest": "latest",
    "socket.io": "git://github.com/LearnBoost/socket.io.git",
    "socket.io-client": "git://github.com/LearnBoost/socket.io-client.git"
  },
  "readme": "# strong-remoting\n\nCommunicate between objects in servers, mobile apps, and other servers.\n\n## Background\n\nCommunicating between objects that run in different processes, whether on the same computer, or in another programming language on a mobile device, is such a common application requirement that it should be simple. This library makes it easy to communicate accross these types of boundries without having to worry about the underlying transport mechanism. Once you determine your application's performance characteristics you can swap out the transport mechanism or build your own optimized transport for your app's specific needs.\n\n### Supported Servers\n\n - **Node.js** - the only planned server.\n\n### Supported Clients\n\n - **Node.js**  **TODO** \n - **HTML5**  **TODO**\n - **iOS**  **TODO**\n - **Android**  **TODO**\n \n### Features\n\n#### Security and Encryption _TODO_\n\nAll transports are runnable over secure channels (eg. TLS). All transports support authentication.\n\n#### Remote Objects\n\nConstruct objects on the server from a connected client.\n\n#### Remote Methods\n\nInvoke methods on remote objects.\n\n#### Data Types\n\n**JSON**\n\n - Number\n - Boolean\n - String\n - Array\n - Object\n\n**Complex Types**\n\n - Date\n - Buffer\n - ReadableStream **TODO**\n - WriteableStream **TODO**\n - EventEmitter **TODO**\n \n#### Hooks\n\nRun code before objects are constructed or methods are invoked. Prevent actions based context (http request, user info, etc).\n\n#### Binary Data **TODO**\n\nSend and recieve raw binary data such as files as a single `Buffer` or `Readable` / `Writeable` streams.\n\n#### Events **TODO**\n\nReference event emitters from clients and listen to their events.\n\n#### Supported Transports\n\n - **socket.io TODO**\n - **http**\n \n#### Content Types\n\n - **JSON** - only planned type\n \n## Basic Usage\n\n### Creating a Server\n\n    // create a set of shared classes\n    var remoteObjects = require('strong-remoting').create();\n\n    // expose the console\n    remoteObjects.exports.console = console;\n\n    // share the log method\n    console.log.shared = true;\n\n    // expose it over http\n    require('http')\n      .createServer(remotes.handler('http'))\n      .listen(3000);\n      \n### Creating a Client (JavaScript)\n\n    // connect to the server\n    var remoteObjects = Remoting.connect('http://localhost:3000', Remoting.adapters.http));\n    \n    // log hello world from the client\n    remoteObjects.invoke('console.log', 'hello world');\n    \n### Server Side Hooks\n    \n    // prevent non localhost requests\n    remoteObjects.before('console.log', function(ctx, next) {\n      if(ctx.req.remoteAddress !== '127.0.0.1') {\n        next(new Error('you are not allowed!'));\n      } else {\n        next();\n      }\n    });\n    \n    // run after console.log but before the response is sent\n    remoteObjects.after('console.log', function(ctx, next) {\n      // change the result\n      ctx.result = 'updated result...';\n      next();\n    });\n\n### Events _TODO_\n\nListen to events on server side emitters from a client.\n\n    // server\n    var myEmitter = remoteObjects.exports.myEmitter = new EventEmitter();\n    \n    setInterval(function() {\n      myEmitter.emit('my event', {foo: 'bar'});\n    }, 1000);\n    \n    // expose the on method\n    myEmitter.on.shared = true;\n\n    // client\n    remoteObjects.invoke('myEmitter.on', 'my event', function (data) {\n      console.log('this will be called multiple times...', data);\n    });\n",
  "readmeFilename": "README.md",
  "_id": "strong-remoting@0.0.1",
  "dist": {
    "shasum": "5cfe55e1dccd8f7b2eb1c0033a669c4ddacde27f"
  },
  "_resolved": "git+ssh://git@github.com:strongloop/strong-remoting.git#93f8d9f00a5e53cd726729ecc0d330da79ed62f1",
  "_from": "strong-remoting@git+ssh://git@github.com:strongloop/strong-remoting.git"
}
